version: '3.8'

services:
  # -----------------------------
  # API SERVICES
  # -----------------------------
  
  # C# API - ASP.NET Core Minimal API
  csharp-api:
    build:
      context: ./services/csharp-api
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    environment:
      - ConnectionStrings__DefaultConnection=Server=postgres;Database=csharpdb;User Id=postgres;Password=postgres_password;
      - ASPNETCORE_ENVIRONMENT=Development
      - REDIS_CONNECTION=redis:6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - postgres
      - redis
      - rabbitmq
    # To scale: uncomment the deploy section below
    # deploy:
    #   replicas: 3
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3
    volumes:
      - ./services/csharp-api:/app

  # Java API - Spring Boot
  java-api:
    build:
      context: ./services/java-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/javadb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres_password
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      - postgres
      - redis
      - rabbitmq
    # To scale: uncomment the deploy section below
    # deploy:
    #   replicas: 3
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3
    volumes:
      - ./services/java-api:/app

  # Node.js/TypeScript API - Express
  nodejs-api:
    build:
      context: ./services/nodejs-api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/nodedb
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      - mongo
      - redis
      - rabbitmq
    # To scale: uncomment the deploy section below
    # deploy:
    #   replicas: 3
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3
    volumes:
      - ./services/nodejs-api:/app

  # Python API - FastAPI
  python-api:
    build:
      context: ./services/python-api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/pythondb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - mongo
      - redis
      - rabbitmq
    # To scale: uncomment the deploy section below
    # deploy:
    #   replicas: 3
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3
    volumes:
      - ./services/python-api:/app

  # -----------------------------
  # DATABASES
  # -----------------------------
  
  # PostgreSQL - Relational Database
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_MULTIPLE_DATABASES=csharpdb,javadb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    # For high-availability setup: uncomment the following lines
    # deploy:
    #   replicas: 1  # Primary only by default
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3

  # MongoDB - NoSQL Database
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    # To enable replica set: uncomment and modify the command below
    # command: mongod --replSet rs0
    # For replica set setup: uncomment the following lines
    # deploy:
    #   replicas: 1  # Primary only by default
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3

  # Redis - Caching Layer
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    # For Redis Sentinel/Cluster setup, uncomment:
    # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    # volumes:
    #   - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    #   - redis_data:/data

  # -----------------------------
  # MESSAGE QUEUES
  # -----------------------------
  
  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    # For RabbitMQ cluster setup: uncomment the following
    # deploy:
    #   replicas: 1  # Single node by default
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3

  # Kafka - Event Streaming (Optional, commented out by default)
  # kafka:
  #   image: confluentinc/cp-kafka:7.3.0
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  #   depends_on:
  #     - zookeeper

  # Zookeeper - Required for Kafka (Optional, commented out by default)
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     - ZOOKEEPER_CLIENT_PORT=2181
  #     - ZOOKEEPER_TICK_TIME=2000

  # -----------------------------
  # GATEWAY/LOAD BALANCER
  # -----------------------------
  
  # Nginx - API Gateway and Load Balancer
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - csharp-api
      - java-api
      - nodejs-api
      - python-api
    # To enable load balancing, update the nginx.conf to point to multiple instances

  # -----------------------------
  # MONITORING
  # -----------------------------
  
  # Prometheus - Metrics Collection (Optional, commented out by default)
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana - Metrics Visualization (Optional, commented out by default)
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./config/grafana/provisioning:/etc/grafana/provisioning
  #   depends_on:
  #     - prometheus

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  rabbitmq_data:
  # prometheus_data:
  # grafana_data:
